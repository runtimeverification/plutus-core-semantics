#!/usr/bin/env bash

set -euo pipefail
shopt -s extglob

debug=false
verbose=false

notif() {
    if ${verbose}; then
        echo "== $0 [$(date)]: $@" >&2
    else
        echo "== $0: $@" >&2
    fi
}

fatal() { notif "[FATAL] $@" ; exit 1 ; }

notif_exec() {
    notif "$@"
    "$@"
}

INSTALL_BIN="$(cd $(dirname $0) && pwd)"
INSTALL_LIB="$(dirname ${INSTALL_BIN})/lib/kplutus"
INSTALL_INCLUDE=${INSTALL_LIB}/include
KPLC=kplc

install_k_bin=${INSTALL_LIB}/kframework/bin
plugin_include=${INSTALL_LIB}/blockchain-k-plugin/include
libff_dir=${INSTALL_LIB}/libff
libcryptopp_dir=${INSTALL_LIB}/cryptopp

export PATH="${INSTALL_BIN}:${INSTALL_LIB}:${install_k_bin}:${PATH}"

export K_OPTS="${K_OPTS:--Xmx16G -Xss512m}"

# Runners
# -------

run_kompile() {
    local kompile_opts

    kompile_opts=( "${run_file}" --directory "${backend_dir}" --backend "${backend}" )
    kompile_opts+=( -I "${INSTALL_INCLUDE}/kframework" -I "${plugin_include}/kframework"          )
    kompile_opts+=( --md-selector "k | libcrypto-extra"                                           )
    kompile_opts+=( --hook-namespaces "KRYPTO"                                                    )
    kompile_opts+=( --emit-json                                                                   )
    kompile_opts+=( -ccopt -L${libff_dir}/lib -ccopt -I${libff_dir}/include                       )
    kompile_opts+=( -ccopt ${plugin_include}/c/plugin_util.cpp                                    )
    kompile_opts+=( -ccopt ${plugin_include}/c/crypto.cpp                                         )
    kompile_opts+=( -ccopt ${plugin_include}/c/hash_ext.cpp                                       )
    kompile_opts+=( -ccopt ${plugin_include}/c/blake2.cpp                                         )
    kompile_opts+=( -ccopt -g -ccopt -std=c++14                                                   )
    kompile_opts+=( -ccopt -lff -ccopt -lcryptopp -ccopt -lsecp256k1 -ccopt -lssl -ccopt -lcrypto )
    if [[ "$(uname -s)" == 'Linux' ]]; then
        kompile_opts+=( -ccopt -lprocps )
    elif [[ "$(uname -s)" == 'Darwin' ]]; then
        openssl_root="$(brew --prefix openssl)"
        brew_root="$(brew --prefix)"
        kompile_opts+=( -ccopt -I${brew_root}/include -ccopt -L/${brew_root}/lib -ccopt -I${openssl_root}/include -ccopt -L${openssl_root}/lib )
    fi
    if [[ -d ${libcryptopp_dir} ]]; then
        kompile_opts+=( -ccopt -I${libcryptopp_dir}/include -ccopt -L/${libcryptopp_dir}/lib )
    fi

    notif_exec kompile "${kompile_opts[@]}" "$@"
}

run_interpreter() {
    notif_exec krun --directory "${backend_dir}" "${run_file}" "$@"                        \
        | (${result_only} && ( tr '\n' ' ' | sed "s/.*<k>\(.*\)~> \. .*/\1/g" ) || cat - )
}

# Main
# ----

run_command="$1" ; shift

if [[ "$run_command" == 'help' ]] || [[ "$run_command" == '--help' ]] ; then
    echo "
        usage: ${KPLC} kompile <main> <kplc arg>* <kompile arg>*
               ${KPLC} run     <pgm>  <kplc arg>* <krun arg>*

               ${KPLC} [help|--help|version|--version]

           ${KPLC} kompile : Run kompile with arguments setup to include KPlutus semantics.
           ${KPLC} help    : Display this help message.
           ${KPLC} version : Display the versions of KPlutus.

           Arguments:
                      <main>        : Name of main file to kompile.
                      <kplc arg>    : Arguments for the kplc script.
                      <kompile arg> : Arguments for kompile.
                      <kompile arg> : Arguments for krun.

           Available <kplc arg>:
                  --debug
                  --verbose
                  --backend
                  --backend-dir
    "
    exit 0
fi

if [[ "$run_command" == 'version' ]] || [[ "$run_command" == '--version' ]]; then
    notif 'KPlutus Version'
    cat $INSTALL_LIB/version
    exit 0
fi

result_only=false
backend='llvm'

if [[ "$run_command" == 'run-haskell' ]]; then
    run_command='run'
    backend='haskell'
else
    backend='llvm'
fi

args=()
while [[ $# -gt 0 ]]; do
    case "$1" in
        --debug)       debug=true       ; args+=("$1") ; shift   ;;
        --verbose)     verbose=true                    ; shift   ;;
        --backend)     backend="$2"                    ; shift 2 ;;
        --backend-dir) backend_dir="$2"                ; shift 2 ;;
        --result-only) result_only=true                ; shift   ;;
        *)             args+=("$1")                    ; shift   ;;
    esac
done

[[ "${#args[@]}" -le 0 ]] || set -- "${args[@]}"
backend_dir="${backend_dir:-$INSTALL_LIB/$backend}"

run_file="$1" ; shift
[[ -f "$run_file" ]] || fatal "File does not exist: $run_file"

! ${debug} || set -x

case "$run_command-$backend" in
    kompile-llvm)    run_kompile     "$@"                                                ;;
    kompile-haskell) run_kompile     "$@"                                                ;;
    run-llvm)        run_interpreter "$@"                                                ;;
    run-haskell)     run_interpreter "$@"                                                ;;
    *)               $0 help ; fatal "Unknown command on backend: $run_command $backend" ;;
esac
