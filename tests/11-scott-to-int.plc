(program 0.1.0 [ [ [ { (abs r (type) (lam f (fun r r) [ { { (abs a (type) (abs b (type) (lam f (fun (fun a b) (fun a b)) [ { (abs a (type) (lam s [(lam a (type) (fix self (fun self a))) a] [ (unwrap s) s ] ) ) (fun a b) } (wrap self [(lam a (type) (fun self a)) (fun a b)] (lam s [(lam a (type) (fix self (fun self a))) (fun a b)] (lam x a [ [ f [ { (abs a (type) (lam s [(lam a (type) (fix self (fun self a))) a] [ (unwrap s) s ] ) ) (fun a b) } s ] ] x ] ) ) ) ] ) ) ) r } (fun (fix nat (all r (type) (fun r (fun (fun nat r) r)))) r) } (lam rec (fun r (fun (fix nat (all r (type) (fun r (fun (fun nat r) r)))) r)) (lam z r (lam n (fix nat (all r (type) (fun r (fun (fun nat r) r)))) [ [ { (unwrap n) r } z ] [ rec [ f z ] ] ] ) ) ) ] ) ) (con integer) } [ (builtin addInteger) (con 1 ! 1) ] ] (con 1 ! 0) ] [ (lam n (fix nat (all r (type) (fun r (fun (fun nat r) r)))) (wrap nat (all r (type) (fun r (fun (fun nat r) r))) (abs r (type) (lam z r (lam f (fun (fix nat (all r (type) (fun r (fun (fun nat r) r)))) r) [ f n ] ) ) ) ) ) [ (lam n (fix nat (all r (type) (fun r (fun (fun nat r) r)))) (wrap nat (all r (type) (fun r (fun (fun nat r) r))) (abs r (type) (lam z r (lam f (fun (fix nat (all r (type) (fun r (fun (fun nat r) r)))) r) [ f n ] ) ) ) ) ) [ (lam n (fix nat (all r (type) (fun r (fun (fun nat r) r)))) (wrap nat (all r (type) (fun r (fun (fun nat r) r))) (abs r (type) (lam z r (lam f (fun (fix nat (all r (type) (fun r (fun (fun nat r) r)))) r) [ f n ] ) ) ) ) ) [ (lam n (fix nat (all r (type) (fun r (fun (fun nat r) r)))) (wrap nat (all r (type) (fun r (fun (fun nat r) r))) (abs r (type) (lam z r (lam f (fun (fix nat (all r (type) (fun r (fun (fun nat r) r)))) r) [ f n ] ) ) ) ) ) [ (lam n (fix nat (all r (type) (fun r (fun (fun nat r) r)))) (wrap nat (all r (type) (fun r (fun (fun nat r) r))) (abs r (type) (lam z r (lam f (fun (fix nat (all r (type) (fun r (fun (fun nat r) r)))) r) [ f n ] ) ) ) ) ) [ (lam n (fix nat (all r (type) (fun r (fun (fun nat r) r)))) (wrap nat (all r (type) (fun r (fun (fun nat r) r))) (abs r (type) (lam z r (lam f (fun (fix nat (all r (type) (fun r (fun (fun nat r) r)))) r) [ f n ] ) ) ) ) ) [ (lam n (fix nat (all r (type) (fun r (fun (fun nat r) r)))) (wrap nat (all r (type) (fun r (fun (fun nat r) r))) (abs r (type) (lam z r (lam f (fun (fix nat (all r (type) (fun r (fun (fun nat r) r)))) r) [ f n ] ) ) ) ) ) [ (lam n (fix nat (all r (type) (fun r (fun (fun nat r) r)))) (wrap nat (all r (type) (fun r (fun (fun nat r) r))) (abs r (type) (lam z r (lam f (fun (fix nat (all r (type) (fun r (fun (fun nat r) r)))) r) [ f n ] ) ) ) ) ) [ (lam n (fix nat (all r (type) (fun r (fun (fun nat r) r)))) (wrap nat (all r (type) (fun r (fun (fun nat r) r))) (abs r (type) (lam z r (lam f (fun (fix nat (all r (type) (fun r (fun (fun nat r) r)))) r) [ f n ] ) ) ) ) ) [ (lam n (fix nat (all r (type) (fun r (fun (fun nat r) r)))) (wrap nat (all r (type) (fun r (fun (fun nat r) r))) (abs r (type) (lam z r (lam f (fun (fix nat (all r (type) (fun r (fun (fun nat r) r)))) r) [ f n ] ) ) ) ) ) [ (lam n (fix nat (all r (type) (fun r (fun (fun nat r) r)))) (wrap nat (all r (type) (fun r (fun (fun nat r) r))) (abs r (type) (lam z r (lam f (fun (fix nat (all r (type) (fun r (fun (fun nat r) r)))) r) [ f n ] ) ) ) ) ) (wrap nat (all r (type) (fun r (fun (fun nat r) r))) (abs r (type) (lam z r (lam f (fun (fix nat (all r (type) (fun r (fun (fun nat r) r)))) r) z ) ) ) ) ] ] ] ] ] ] ] ] ] ] ] ])
