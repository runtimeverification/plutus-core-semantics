(program
1.0.0
[
[
[
(lam
fix1_0
[
(lam
error_1
[
[
[
(lam
Nil_2
(lam
Cons_3
(lam
Nil_match_4
[
(lam
inquireFront_5
[
(lam
removeFront_6
[
(lam
foldr_7
[
[
[
(lam
True_8
(lam
False_9
(lam
Bool_match_10
[
(lam
depthSearch_11
[
[
[
[
(lam
EQ_12
(lam
GT_13
(lam
LT_14
(lam
Ordering_match_15
[
[
(lam
CConsOrd_16
(lam
Ord_match_17
[
(lam
compare_18
[
[
(lam
Tuple2_19
(lam
Tuple2_match_20
[
(lam
fOrdTuple2_ccompare_21
[
[
[
(lam
Just_22
(lam
Nothing_23
(lam
Maybe_match_24
[
[
(lam
Board_25
(lam
ChessSet_match_26
[
(lam
fEqChessSet_c_27
[
(lam
augment_28
[
(lam
foldr_29
[
(lam
build_30
[
(lam
quickSort_31
[
(lam
greaterThanInteger_32
[
(lam
interval_33
[
(lam
repl_34
[
[
(lam
CConsMonoid_35
(lam
Monoid_match_36
[
(lam
p1Monoid_37
[
(lam
mempty_38
[
(lam
fFoldableNil_cfoldMap_39
[
(lam
length_40
[
(lam
map_41
[
(lam
addPiece_42
[
(lam
equalsInteger_43
[
(lam
notIn_44
[
(lam
wcanMoveTo_45
[
(lam
canMoveTo_46
[
[
(lam
UTuple2_47
(lam
UTuple2_match_48
[
[
[
[
[
[
[
[
[
(lam
DL_49
(lam
DR_50
(lam
LD_51
(lam
LU_52
(lam
RD_53
(lam
RU_54
(lam
UL_55
(lam
UR_56
(lam
Direction_match_57
[
(lam
move_58
[
(lam
possibleMoves_59
[
(lam
deleteFirst_60
[
(lam
descAndNo_61
[
(lam
wcanJumpFirst_62
[
(lam
zip_63
[
(lam
zipConst_64
(lam
depth_65
(lam
boardSize_66
[
(lam
l_67
[
(lam
numStarts_68
[
[
[
[
[
(force
[
depthSearch_11
(delay
(lam
x_69
x_69
)
)
]
)
(lam
ds_70
(lam
ds_71
[
(force
[
(force
(force
Tuple2_match_20
)
)
ds_70
]
)
(lam
a_72
(lam
b_73
[
(force
[
(force
(force
Tuple2_match_20
)
)
ds_71
]
)
(lam
a_74
(lam
b_75
(force
[
[
(force
[
Bool_match_10
[
[
equalsInteger_43
a_72
]
a_74
]
]
)
(delay
[
[
fEqChessSet_c_27
b_73
]
b_75
]
)
]
(delay
False_9
)
]
)
)
)
]
)
)
]
)
)
]
depth_65
]
[
[
[
(force
(force
[
foldr_7
(delay
(lam
x_76
x_76
)
)
]
)
)
(force
Cons_3
)
]
(force
Nil_2
)
]
[
[
(force
(force
[
zip_63
(delay
(lam
x_77
x_77
)
)
]
)
)
[
[
repl_34
(force
numStarts_68
)
]
[
[
(builtin
subtractInteger
)
(con
integer
1
)
]
(force
numStarts_68
)
]
]
]
(force
l_67
)
]
]
]
(lam
ds_78
[
(force
[
(force
(force
Tuple2_match_20
)
)
ds_78
]
)
(lam
x_79
(lam
y_80
[
[
(force
(force
[
zipConst_64
(delay
(lam
x_81
x_81
)
)
]
)
)
[
[
(builtin
addInteger
)
x_79
]
(con
integer
1
)
]
]
[
(force
[
ChessSet_match_26
y_80
]
)
(lam
ww_82
(lam
ww_83
(lam
ww_84
(lam
ww_85
[
(lam
board_86
[
(lam
singles_87
[
(lam
l_88
[
(lam
j_89
(force
[
[
(force
[
Bool_match_10
[
[
[
[
wcanJumpFirst_62
ww_82
]
ww_83
]
ww_84
]
ww_85
]
]
)
(delay
(force
[
[
(force
[
Bool_match_10
[
(lam
board_90
[
[
[
(force
(builtin
ifThenElse
)
)
[
[
(builtin
equalsInteger
)
[
[
(force
(force
length_40
)
)
[
fFoldableNil_cfoldMap_39
(delay
(lam
x_91
x_91
)
)
]
]
[
possibleMoves_59
board_90
]
]
]
(con
integer
0
)
]
]
True_8
]
False_9
]
)
[
[
addPiece_42
(force
[
[
(force
[
(force
Maybe_match_24
)
ww_84
]
)
(lam
tile_92
(delay
tile_92
)
)
]
(delay
[
(force
error_1
)
(con
unit
()
)
]
)
]
)
]
(force
board_86
)
]
]
]
)
(delay
(force
Nil_2
)
)
]
(delay
(force
j_89
)
)
]
)
)
]
(delay
(force
j_89
)
)
]
)
)
(delay
(force
[
[
(force
[
Bool_match_10
[
[
[
(force
(builtin
ifThenElse
)
)
[
[
(builtin
equalsInteger
)
(force
l_88
)
]
(con
integer
0
)
]
]
True_8
]
False_9
]
]
)
(delay
[
[
(force
(force
[
map_41
(delay
(lam
x_93
x_93
)
)
]
)
)
(lam
ds_94
[
(force
[
(force
(force
Tuple2_match_20
)
)
ds_94
]
)
(lam
ds_95
(lam
b_96
b_96
)
)
]
)
]
[
[
(force
[
quickSort_31
(delay
(lam
x_97
x_97
)
)
]
)
[
[
(lam
v_98
(lam
v_99
[
[
[
[
[
[
[
[
(force
CConsOrd_16
)
(lam
w_100
(lam
w_101
[
(force
[
(force
Ord_match_17
)
v_98
]
)
(lam
ww_102
(lam
ww_103
(lam
ww_104
(lam
ww_105
(lam
ww_106
(lam
ww_107
(lam
ww_108
(lam
ww_109
[
(force
[
(force
(force
Tuple2_match_20
)
)
w_100
]
)
(lam
ww_110
(lam
ww_111
[
(force
[
(force
(force
Tuple2_match_20
)
)
w_101
]
)
(lam
ww_112
(lam
ww_113
(force
[
[
(force
[
Bool_match_10
[
[
ww_102
ww_110
]
ww_112
]
]
)
(delay
[
[
[
(force
[
(force
Ord_match_17
)
v_99
]
)
(lam
v_114
(lam
v_115
(lam
v_116
(lam
v_117
(lam
v_118
(lam
v_119
(lam
v_120
(lam
v_121
v_114
)
)
)
)
)
)
)
)
]
ww_111
]
ww_113
]
)
]
(delay
False_9
)
]
)
)
)
]
)
)
]
)
)
)
)
)
)
)
)
]
)
)
]
[
[
(force
(force
fOrdTuple2_ccompare_21
)
)
v_98
]
v_99
]
]
(lam
x_122
(lam
y_123
(force
[
[
[
(force
[
Ordering_match_15
[
[
[
[
(force
(force
fOrdTuple2_ccompare_21
)
)
v_98
]
v_99
]
x_122
]
y_123
]
]
)
(delay
False_9
)
]
(delay
False_9
)
]
(delay
True_8
)
]
)
)
)
]
(lam
x_124
(lam
y_125
(force
[
[
[
(force
[
Ordering_match_15
[
[
[
[
(force
(force
fOrdTuple2_ccompare_21
)
)
v_98
]
v_99
]
x_124
]
y_125
]
]
)
(delay
True_8
)
]
(delay
False_9
)
]
(delay
True_8
)
]
)
)
)
]
(lam
x_126
(lam
y_127
(force
[
[
[
(force
[
Ordering_match_15
[
[
[
[
(force
(force
fOrdTuple2_ccompare_21
)
)
v_98
]
v_99
]
x_126
]
y_127
]
]
)
(delay
False_9
)
]
(delay
True_8
)
]
(delay
False_9
)
]
)
)
)
]
(lam
x_128
(lam
y_129
(force
[
[
[
(force
[
Ordering_match_15
[
[
[
[
(force
(force
fOrdTuple2_ccompare_21
)
)
v_98
]
v_99
]
x_128
]
y_129
]
]
)
(delay
True_8
)
]
(delay
True_8
)
]
(delay
False_9
)
]
)
)
)
]
(lam
x_130
(lam
y_131
(force
[
[
[
(force
[
Ordering_match_15
[
[
[
[
(force
(force
fOrdTuple2_ccompare_21
)
)
v_98
]
v_99
]
x_130
]
y_131
]
]
)
(delay
y_131
)
]
(delay
x_130
)
]
(delay
y_131
)
]
)
)
)
]
(lam
x_132
(lam
y_133
(force
[
[
[
(force
[
Ordering_match_15
[
[
[
[
(force
(force
fOrdTuple2_ccompare_21
)
)
v_98
]
v_99
]
x_132
]
y_133
]
]
)
(delay
x_132
)
]
(delay
y_133
)
]
(delay
x_132
)
]
)
)
)
]
)
)
[
[
[
[
[
[
[
[
(force
CConsOrd_16
)
equalsInteger_43
]
(lam
x_134
(lam
y_135
(force
[
[
(force
[
Bool_match_10
[
[
[
(force
(builtin
ifThenElse
)
)
[
[
(builtin
equalsInteger
)
x_134
]
y_135
]
]
True_8
]
False_9
]
]
)
(delay
EQ_12
)
]
(delay
(force
[
[
(force
[
Bool_match_10
[
[
[
(force
(builtin
ifThenElse
)
)
[
[
(builtin
lessThanEqualsInteger
)
x_134
]
y_135
]
]
True_8
]
False_9
]
]
)
(delay
LT_14
)
]
(delay
GT_13
)
]
)
)
]
)
)
)
]
(lam
x_136
(lam
y_137
[
[
[
(force
(builtin
ifThenElse
)
)
[
[
(builtin
lessThanInteger
)
x_136
]
y_137
]
]
True_8
]
False_9
]
)
)
]
(lam
x_138
(lam
y_139
[
[
[
(force
(builtin
ifThenElse
)
)
[
[
(builtin
lessThanEqualsInteger
)
x_138
]
y_139
]
]
True_8
]
False_9
]
)
)
]
greaterThanInteger_32
]
(lam
x_140
(lam
y_141
[
[
[
(force
(builtin
ifThenElse
)
)
[
[
(builtin
lessThanInteger
)
x_140
]
y_141
]
]
False_9
]
True_8
]
)
)
]
(lam
x_142
(lam
y_143
(force
[
[
(force
[
Bool_match_10
[
[
[
(force
(builtin
ifThenElse
)
)
[
[
(builtin
lessThanEqualsInteger
)
x_142
]
y_143
]
]
True_8
]
False_9
]
]
)
(delay
y_143
)
]
(delay
x_142
)
]
)
)
)
]
(lam
x_144
(lam
y_145
(force
[
[
(force
[
Bool_match_10
[
[
[
(force
(builtin
ifThenElse
)
)
[
[
(builtin
lessThanEqualsInteger
)
x_144
]
y_145
]
]
True_8
]
False_9
]
]
)
(delay
x_144
)
]
(delay
y_145
)
]
)
)
)
]
]
[
[
[
[
[
[
[
[
(force
CConsOrd_16
)
fEqChessSet_c_27
]
(lam
x_146
(lam
y_147
EQ_12
)
)
]
(lam
x_148
(lam
y_149
False_9
)
)
]
fEqChessSet_c_27
]
(lam
x_150
(lam
y_151
False_9
)
)
]
(lam
x_152
(lam
y_153
True_8
)
)
]
(lam
x_154
(lam
y_155
y_155
)
)
]
(lam
x_156
(lam
y_157
x_156
)
)
]
]
]
[
descAndNo_61
(force
board_86
)
]
]
]
)
]
(delay
(force
[
[
(force
[
Bool_match_10
[
[
[
(force
(builtin
ifThenElse
)
)
[
[
(builtin
equalsInteger
)
(force
l_88
)
]
(con
integer
1
)
]
]
True_8
]
False_9
]
]
)
(delay
(force
singles_87
)
)
]
(delay
(force
Nil_2
)
)
]
)
)
]
)
)
]
)
(delay
[
[
(force
(force
length_40
)
)
[
fFoldableNil_cfoldMap_39
(delay
(lam
x_158
x_158
)
)
]
]
(force
singles_87
)
]
)
]
)
(delay
[
(lam
board_159
[
(force
build_30
)
(delay
(lam
c_160
(lam
n_161
[
[
[
(force
(force
foldr_29
)
)
(lam
ds_162
(lam
ds_163
[
(force
[
(force
(force
Tuple2_match_20
)
)
ds_162
]
)
(lam
y_164
(lam
x_165
(force
[
[
(force
[
Bool_match_10
[
[
[
(force
(builtin
ifThenElse
)
)
[
[
(builtin
equalsInteger
)
y_164
]
(con
integer
1
)
]
]
True_8
]
False_9
]
]
)
(delay
[
[
c_160
x_165
]
ds_163
]
)
]
(delay
ds_163
)
]
)
)
)
]
)
)
]
n_161
]
[
descAndNo_61
board_159
]
]
)
)
)
]
)
(force
board_86
)
]
)
]
)
(delay
[
[
[
[
Board_25
ww_82
]
ww_83
]
ww_84
]
ww_85
]
)
]
)
)
)
)
]
]
)
)
]
)
]
(lam
ds_166
[
(force
[
(force
(force
Tuple2_match_20
)
)
ds_166
]
)
(lam
ds_167
(lam
y_168
[
(lam
sze_169
(force
[
[
(force
[
Bool_match_10
[
[
[
(force
(builtin
ifThenElse
)
)
[
[
(builtin
equalsInteger
)
[
(force
[
ChessSet_match_26
y_168
]
)
(lam
ds_170
(lam
n_171
(lam
ds_172
(lam
ds_173
n_171
)
)
)
)
]
]
[
[
(builtin
multiplyInteger
)
(force
sze_169
)
]
(force
sze_169
)
]
]
]
True_8
]
False_9
]
]
)
(delay
[
(force
[
ChessSet_match_26
y_168
]
)
(lam
ww_174
(lam
ww_175
(lam
ww_176
(lam
ww_177
[
[
[
[
wcanJumpFirst_62
ww_174
]
ww_175
]
ww_176
]
ww_177
]
)
)
)
)
]
)
]
(delay
False_9
)
]
)
)
(delay
[
(force
[
ChessSet_match_26
y_168
]
)
(lam
s_178
(lam
ds_179
(lam
ds_180
(lam
ds_181
s_178
)
)
)
)
]
)
]
)
)
]
)
]
)
(delay
[
[
(force
(force
length_40
)
)
[
fFoldableNil_cfoldMap_39
(delay
(lam
x_182
x_182
)
)
]
]
(force
l_67
)
]
)
]
)
(delay
[
(force
build_30
)
(delay
(lam
c_183
(lam
n_184
[
[
[
(force
(force
foldr_29
)
)
(lam
ds_185
(lam
ds_186
[
[
[
(force
(force
foldr_29
)
)
(lam
ds_187
(lam
ds_188
[
[
c_183
[
[
(lam
st_189
(lam
size_190
(force
[
[
(force
[
Bool_match_10
[
[
[
(force
(builtin
ifThenElse
)
)
[
[
(builtin
equalsInteger
)
[
[
(builtin
remainderInteger
)
size_190
]
(con
integer
2
)
]
]
(con
integer
0
)
]
]
True_8
]
False_9
]
]
)
(delay
[
[
[
[
Board_25
size_190
]
(con
integer
1
)
]
[
(force
Just_22
)
st_189
]
]
[
(force
build_30
)
(delay
(lam
c_191
(lam
n_192
[
[
c_191
st_189
]
n_192
]
)
)
)
]
]
)
]
(delay
[
(force
error_1
)
(con
unit
()
)
]
)
]
)
)
)
[
[
(force
(force
Tuple2_19
)
)
ds_185
]
ds_187
]
]
boardSize_66
]
]
ds_188
]
)
)
]
ds_186
]
[
[
interval_33
(con
integer
1
)
]
boardSize_66
]
]
)
)
]
n_184
]
[
[
interval_33
(con
integer
1
)
]
boardSize_66
]
]
)
)
)
]
)
]
)
)
)
[
(lam
arg_0_193
arg_0_193
)
[
(force
(force
fix1_0
)
)
(lam
zipConst_194
(lam
arg_195
(delay
(delay
(lam
ds_196
(lam
ds_197
(force
[
[
(force
[
(force
Nil_match_4
)
ds_197
]
)
(delay
(force
Nil_2
)
)
]
(lam
b_198
(lam
bs_199
(delay
[
[
(force
Cons_3
)
[
[
(force
(force
Tuple2_19
)
)
ds_196
]
b_198
]
]
[
[
(force
(force
[
zipConst_194
(delay
(lam
x_200
x_200
)
)
]
)
)
ds_196
]
bs_199
]
]
)
)
)
]
)
)
)
)
)
)
)
]
]
]
)
[
(lam
arg_0_201
arg_0_201
)
[
(force
(force
fix1_0
)
)
(lam
zip_202
(lam
arg_203
(delay
(delay
(lam
ds_204
(lam
bs_205
(force
[
[
(force
[
(force
Nil_match_4
)
ds_204
]
)
(delay
(force
Nil_2
)
)
]
(lam
ipv_206
(lam
ipv_207
(delay
(force
[
[
(force
[
(force
Nil_match_4
)
bs_205
]
)
(delay
(force
Nil_2
)
)
]
(lam
ipv_208
(lam
ipv_209
(delay
[
[
(force
Cons_3
)
[
[
(force
(force
Tuple2_19
)
)
ipv_206
]
ipv_208
]
]
[
[
(force
(force
[
zip_202
(delay
(lam
x_210
x_210
)
)
]
)
)
ipv_207
]
ipv_209
]
]
)
)
)
]
)
)
)
)
]
)
)
)
)
)
)
)
]
]
]
)
(lam
ww_211
(lam
ww_212
(lam
ww_213
(lam
ww_214
(force
[
[
(force
[
(force
Maybe_match_24
)
ww_213
]
)
(lam
tile_215
(delay
[
(force
[
(force
(force
Tuple2_match_20
)
)
tile_215
]
)
(lam
ww_216
(lam
ww_217
[
[
[
wcanMoveTo_45
ww_216
]
ww_217
]
[
deleteFirst_60
[
[
[
[
Board_25
ww_211
]
ww_212
]
ww_213
]
ww_214
]
]
]
)
)
]
)
)
]
(delay
[
(force
[
(force
(force
Tuple2_match_20
)
)
[
(force
error_1
)
(con
unit
()
)
]
]
)
(lam
ww_218
(lam
ww_219
[
[
[
wcanMoveTo_45
ww_218
]
ww_219
]
[
deleteFirst_60
[
[
[
[
Board_25
ww_211
]
ww_212
]
(force
Nothing_23
)
]
ww_214
]
]
]
)
)
]
)
]
)
)
)
)
)
]
)
(lam
board_220
[
(force
build_30
)
(delay
(lam
c_221
(lam
n_222
[
[
[
(force
(force
foldr_29
)
)
(lam
ds_223
(lam
ds_224
[
[
c_221
[
[
(force
(force
Tuple2_19
)
)
[
[
(force
(force
length_40
)
)
[
fFoldableNil_cfoldMap_39
(delay
(lam
x_225
x_225
)
)
]
]
[
possibleMoves_59
[
deleteFirst_60
ds_223
]
]
]
]
ds_223
]
]
ds_224
]
)
)
]
n_222
]
[
[
(force
(force
[
map_41
(delay
(lam
x_226
x_226
)
)
]
)
)
(lam
dir_227
[
[
addPiece_42
[
(force
[
ChessSet_match_26
board_220
]
)
(lam
ds_228
(lam
ds_229
(lam
ds_230
(lam
ds_231
(force
[
[
(force
[
(force
Nil_match_4
)
ds_231
]
)
(delay
[
[
move_58
dir_227
]
[
(force
error_1
)
(con
unit
()
)
]
]
)
]
(lam
t_232
(lam
ds_233
(delay
[
[
move_58
dir_227
]
t_232
]
)
)
)
]
)
)
)
)
)
]
]
board_220
]
)
]
[
possibleMoves_59
board_220
]
]
]
)
)
)
]
)
]
)
(lam
ds_234
[
(force
[
ChessSet_match_26
ds_234
]
)
(lam
s_235
(lam
n_236
(lam
ds_237
(lam
ts_238
[
[
[
[
Board_25
s_235
]
[
[
(builtin
subtractInteger
)
n_236
]
(con
integer
1
)
]
]
[
[
(lam
rev_239
(lam
l_240
[
[
rev_239
l_240
]
(force
Nil_2
)
]
)
)
[
(lam
arg_0_241
arg_0_241
)
[
(force
(force
fix1_0
)
)
(lam
rev_242
(lam
ds_243
(lam
a_244
(force
[
[
(force
[
(force
Nil_match_4
)
ds_243
]
)
(delay
(force
[
[
(force
[
(force
Nil_match_4
)
a_244
]
)
(delay
[
(force
error_1
)
(con
unit
()
)
]
)
]
(lam
ds_245
(lam
ds_246
(delay
(force
[
[
(force
[
(force
Nil_match_4
)
ds_246
]
)
(delay
(force
Nothing_23
)
)
]
(lam
a_247
(lam
ds_248
(delay
[
(force
Just_22
)
a_247
]
)
)
)
]
)
)
)
)
]
)
)
]
(lam
x_249
(lam
xs_250
(delay
[
[
rev_242
xs_250
]
[
[
(force
Cons_3
)
x_249
]
a_244
]
]
)
)
)
]
)
)
)
)
]
]
]
ts_238
]
]
[
[
(lam
rev_251
[
(lam
rev_252
(lam
l_253
[
[
rev_252
l_253
]
(force
Nil_2
)
]
)
)
[
(lam
arg_0_254
arg_0_254
)
[
(force
(force
fix1_0
)
)
(lam
rev_255
(lam
ds_256
(lam
a_257
(force
[
[
(force
[
(force
Nil_match_4
)
ds_256
]
)
(delay
(force
[
[
(force
[
(force
Nil_match_4
)
a_257
]
)
(delay
[
(force
error_1
)
(con
unit
()
)
]
)
]
(lam
ds_258
(lam
as_259
(delay
[
[
rev_251
as_259
]
(force
Nil_2
)
]
)
)
)
]
)
)
]
(lam
x_260
(lam
xs_261
(delay
[
[
rev_255
xs_261
]
[
[
(force
Cons_3
)
x_260
]
a_257
]
]
)
)
)
]
)
)
)
)
]
]
]
)
[
(lam
arg_0_262
arg_0_262
)
[
(force
(force
fix1_0
)
)
(lam
rev_263
(lam
ds_264
(lam
a_265
(force
[
[
(force
[
(force
Nil_match_4
)
ds_264
]
)
(delay
a_265
)
]
(lam
x_266
(lam
xs_267
(delay
[
[
rev_263
xs_267
]
[
[
(force
Cons_3
)
x_266
]
a_265
]
]
)
)
)
]
)
)
)
)
]
]
]
ts_238
]
]
)
)
)
)
]
)
]
)
(lam
board_268
[
(force
build_30
)
(delay
(lam
c_269
(lam
n_270
[
(lam
ds_271
[
(lam
ds_272
[
(lam
ds_273
[
(lam
ds_274
[
(lam
ds_275
[
(lam
ds_276
[
(lam
ds_277
[
(force
[
ChessSet_match_26
board_268
]
)
(lam
ds_278
(lam
ds_279
(lam
ds_280
(lam
ds_281
(force
[
[
(force
[
(force
Nil_match_4
)
ds_281
]
)
(delay
(force
[
[
(force
[
Bool_match_10
[
[
canMoveTo_46
[
[
move_58
UL_55
]
[
(force
error_1
)
(con
unit
()
)
]
]
]
board_268
]
]
)
(delay
[
[
c_269
UL_55
]
(force
ds_277
)
]
)
]
(delay
(force
ds_277
)
)
]
)
)
]
(lam
t_282
(lam
ds_283
(delay
(force
[
[
(force
[
Bool_match_10
[
[
canMoveTo_46
[
[
move_58
UL_55
]
t_282
]
]
board_268
]
]
)
(delay
[
[
c_269
UL_55
]
(force
ds_277
)
]
)
]
(delay
(force
ds_277
)
)
]
)
)
)
)
]
)
)
)
)
)
]
)
(delay
[
(force
[
ChessSet_match_26
board_268
]
)
(lam
ds_284
(lam
ds_285
(lam
ds_286
(lam
ds_287
(force
[
[
(force
[
(force
Nil_match_4
)
ds_287
]
)
(delay
(force
[
[
(force
[
Bool_match_10
[
[
canMoveTo_46
[
[
move_58
UR_56
]
[
(force
error_1
)
(con
unit
()
)
]
]
]
board_268
]
]
)
(delay
[
[
c_269
UR_56
]
(force
ds_276
)
]
)
]
(delay
(force
ds_276
)
)
]
)
)
]
(lam
t_288
(lam
ds_289
(delay
(force
[
[
(force
[
Bool_match_10
[
[
canMoveTo_46
[
[
move_58
UR_56
]
t_288
]
]
board_268
]
]
)
(delay
[
[
c_269
UR_56
]
(force
ds_276
)
]
)
]
(delay
(force
ds_276
)
)
]
)
)
)
)
]
)
)
)
)
)
]
)
]
)
(delay
[
(force
[
ChessSet_match_26
board_268
]
)
(lam
ds_290
(lam
ds_291
(lam
ds_292
(lam
ds_293
(force
[
[
(force
[
(force
Nil_match_4
)
ds_293
]
)
(delay
(force
[
[
(force
[
Bool_match_10
[
[
canMoveTo_46
[
[
move_58
DL_49
]
[
(force
error_1
)
(con
unit
()
)
]
]
]
board_268
]
]
)
(delay
[
[
c_269
DL_49
]
(force
ds_275
)
]
)
]
(delay
(force
ds_275
)
)
]
)
)
]
(lam
t_294
(lam
ds_295
(delay
(force
[
[
(force
[
Bool_match_10
[
[
canMoveTo_46
[
[
move_58
DL_49
]
t_294
]
]
board_268
]
]
)
(delay
[
[
c_269
DL_49
]
(force
ds_275
)
]
)
]
(delay
(force
ds_275
)
)
]
)
)
)
)
]
)
)
)
)
)
]
)
]
)
(delay
[
(force
[
ChessSet_match_26
board_268
]
)
(lam
ds_296
(lam
ds_297
(lam
ds_298
(lam
ds_299
(force
[
[
(force
[
(force
Nil_match_4
)
ds_299
]
)
(delay
(force
[
[
(force
[
Bool_match_10
[
[
canMoveTo_46
[
[
move_58
DR_50
]
[
(force
error_1
)
(con
unit
()
)
]
]
]
board_268
]
]
)
(delay
[
[
c_269
DR_50
]
(force
ds_274
)
]
)
]
(delay
(force
ds_274
)
)
]
)
)
]
(lam
t_300
(lam
ds_301
(delay
(force
[
[
(force
[
Bool_match_10
[
[
canMoveTo_46
[
[
move_58
DR_50
]
t_300
]
]
board_268
]
]
)
(delay
[
[
c_269
DR_50
]
(force
ds_274
)
]
)
]
(delay
(force
ds_274
)
)
]
)
)
)
)
]
)
)
)
)
)
]
)
]
)
(delay
[
(force
[
ChessSet_match_26
board_268
]
)
(lam
ds_302
(lam
ds_303
(lam
ds_304
(lam
ds_305
(force
[
[
(force
[
(force
Nil_match_4
)
ds_305
]
)
(delay
(force
[
[
(force
[
Bool_match_10
[
[
canMoveTo_46
[
[
move_58
LU_52
]
[
(force
error_1
)
(con
unit
()
)
]
]
]
board_268
]
]
)
(delay
[
[
c_269
LU_52
]
(force
ds_273
)
]
)
]
(delay
(force
ds_273
)
)
]
)
)
]
(lam
t_306
(lam
ds_307
(delay
(force
[
[
(force
[
Bool_match_10
[
[
canMoveTo_46
[
[
move_58
LU_52
]
t_306
]
]
board_268
]
]
)
(delay
[
[
c_269
LU_52
]
(force
ds_273
)
]
)
]
(delay
(force
ds_273
)
)
]
)
)
)
)
]
)
)
)
)
)
]
)
]
)
(delay
[
(force
[
ChessSet_match_26
board_268
]
)
(lam
ds_308
(lam
ds_309
(lam
ds_310
(lam
ds_311
(force
[
[
(force
[
(force
Nil_match_4
)
ds_311
]
)
(delay
(force
[
[
(force
[
Bool_match_10
[
[
canMoveTo_46
[
[
move_58
LD_51
]
[
(force
error_1
)
(con
unit
()
)
]
]
]
board_268
]
]
)
(delay
[
[
c_269
LD_51
]
(force
ds_272
)
]
)
]
(delay
(force
ds_272
)
)
]
)
)
]
(lam
t_312
(lam
ds_313
(delay
(force
[
[
(force
[
Bool_match_10
[
[
canMoveTo_46
[
[
move_58
LD_51
]
t_312
]
]
board_268
]
]
)
(delay
[
[
c_269
LD_51
]
(force
ds_272
)
]
)
]
(delay
(force
ds_272
)
)
]
)
)
)
)
]
)
)
)
)
)
]
)
]
)
(delay
[
(force
[
ChessSet_match_26
board_268
]
)
(lam
ds_314
(lam
ds_315
(lam
ds_316
(lam
ds_317
(force
[
[
(force
[
(force
Nil_match_4
)
ds_317
]
)
(delay
(force
[
[
(force
[
Bool_match_10
[
[
canMoveTo_46
[
[
move_58
RU_54
]
[
(force
error_1
)
(con
unit
()
)
]
]
]
board_268
]
]
)
(delay
[
[
c_269
RU_54
]
(force
ds_271
)
]
)
]
(delay
(force
ds_271
)
)
]
)
)
]
(lam
t_318
(lam
ds_319
(delay
(force
[
[
(force
[
Bool_match_10
[
[
canMoveTo_46
[
[
move_58
RU_54
]
t_318
]
]
board_268
]
]
)
(delay
[
[
c_269
RU_54
]
(force
ds_271
)
]
)
]
(delay
(force
ds_271
)
)
]
)
)
)
)
]
)
)
)
)
)
]
)
]
)
(delay
[
(force
[
ChessSet_match_26
board_268
]
)
(lam
ds_320
(lam
ds_321
(lam
ds_322
(lam
ds_323
(force
[
[
(force
[
(force
Nil_match_4
)
ds_323
]
)
(delay
(force
[
[
(force
[
Bool_match_10
[
[
canMoveTo_46
[
[
move_58
RD_53
]
[
(force
error_1
)
(con
unit
()
)
]
]
]
board_268
]
]
)
(delay
[
[
c_269
RD_53
]
n_270
]
)
]
(delay
n_270
)
]
)
)
]
(lam
t_324
(lam
ds_325
(delay
(force
[
[
(force
[
Bool_match_10
[
[
canMoveTo_46
[
[
move_58
RD_53
]
t_324
]
]
board_268
]
]
)
(delay
[
[
c_269
RD_53
]
n_270
]
)
]
(delay
n_270
)
]
)
)
)
)
]
)
)
)
)
)
]
)
]
)
)
)
]
)
]
)
(lam
w_326
(lam
w_327
[
(force
[
(force
(force
Tuple2_match_20
)
)
w_327
]
)
(lam
ww_328
(lam
ww_329
[
(force
[
(force
(force
UTuple2_match_48
)
)
(force
[
[
[
[
[
[
[
[
(force
[
Direction_match_57
w_326
]
)
(delay
[
[
(force
(force
UTuple2_47
)
)
[
[
(builtin
subtractInteger
)
ww_328
]
(con
integer
1
)
]
]
[
[
(builtin
addInteger
)
ww_329
]
(con
integer
2
)
]
]
)
]
(delay
[
[
(force
(force
UTuple2_47
)
)
[
[
(builtin
addInteger
)
ww_328
]
(con
integer
1
)
]
]
[
[
(builtin
addInteger
)
ww_329
]
(con
integer
2
)
]
]
)
]
(delay
[
[
(force
(force
UTuple2_47
)
)
[
[
(builtin
subtractInteger
)
ww_328
]
(con
integer
2
)
]
]
[
[
(builtin
addInteger
)
ww_329
]
(con
integer
1
)
]
]
)
]
(delay
[
[
(force
(force
UTuple2_47
)
)
[
[
(builtin
subtractInteger
)
ww_328
]
(con
integer
2
)
]
]
[
[
(builtin
subtractInteger
)
ww_329
]
(con
integer
1
)
]
]
)
]
(delay
[
[
(force
(force
UTuple2_47
)
)
[
[
(builtin
addInteger
)
ww_328
]
(con
integer
2
)
]
]
[
[
(builtin
addInteger
)
ww_329
]
(con
integer
1
)
]
]
)
]
(delay
[
[
(force
(force
UTuple2_47
)
)
[
[
(builtin
addInteger
)
ww_328
]
(con
integer
2
)
]
]
[
[
(builtin
subtractInteger
)
ww_329
]
(con
integer
1
)
]
]
)
]
(delay
[
[
(force
(force
UTuple2_47
)
)
[
[
(builtin
subtractInteger
)
ww_328
]
(con
integer
1
)
]
]
[
[
(builtin
subtractInteger
)
ww_329
]
(con
integer
2
)
]
]
)
]
(delay
[
[
(force
(force
UTuple2_47
)
)
[
[
(builtin
addInteger
)
ww_328
]
(con
integer
1
)
]
]
[
[
(builtin
subtractInteger
)
ww_329
]
(con
integer
2
)
]
]
)
]
)
]
)
(lam
ww_330
(lam
ww_331
[
[
(force
(force
Tuple2_19
)
)
ww_330
]
ww_331
]
)
)
]
)
)
]
)
)
]
)
)
)
)
)
)
)
)
)
(delay
(lam
case_DL_332
(lam
case_DR_333
(lam
case_LD_334
(lam
case_LU_335
(lam
case_RD_336
(lam
case_RU_337
(lam
case_UL_338
(lam
case_UR_339
case_DL_332
)
)
)
)
)
)
)
)
)
]
(delay
(lam
case_DL_340
(lam
case_DR_341
(lam
case_LD_342
(lam
case_LU_343
(lam
case_RD_344
(lam
case_RU_345
(lam
case_UL_346
(lam
case_UR_347
case_DR_341
)
)
)
)
)
)
)
)
)
]
(delay
(lam
case_DL_348
(lam
case_DR_349
(lam
case_LD_350
(lam
case_LU_351
(lam
case_RD_352
(lam
case_RU_353
(lam
case_UL_354
(lam
case_UR_355
case_LD_350
)
)
)
)
)
)
)
)
)
]
(delay
(lam
case_DL_356
(lam
case_DR_357
(lam
case_LD_358
(lam
case_LU_359
(lam
case_RD_360
(lam
case_RU_361
(lam
case_UL_362
(lam
case_UR_363
case_LU_359
)
)
)
)
)
)
)
)
)
]
(delay
(lam
case_DL_364
(lam
case_DR_365
(lam
case_LD_366
(lam
case_LU_367
(lam
case_RD_368
(lam
case_RU_369
(lam
case_UL_370
(lam
case_UR_371
case_RD_368
)
)
)
)
)
)
)
)
)
]
(delay
(lam
case_DL_372
(lam
case_DR_373
(lam
case_LD_374
(lam
case_LU_375
(lam
case_RD_376
(lam
case_RU_377
(lam
case_UL_378
(lam
case_UR_379
case_RU_377
)
)
)
)
)
)
)
)
)
]
(delay
(lam
case_DL_380
(lam
case_DR_381
(lam
case_LD_382
(lam
case_LU_383
(lam
case_RD_384
(lam
case_RU_385
(lam
case_UL_386
(lam
case_UR_387
case_UL_386
)
)
)
)
)
)
)
)
)
]
(delay
(lam
case_DL_388
(lam
case_DR_389
(lam
case_LD_390
(lam
case_LU_391
(lam
case_RD_392
(lam
case_RU_393
(lam
case_UL_394
(lam
case_UR_395
case_UR_395
)
)
)
)
)
)
)
)
)
]
(lam
x_396
x_396
)
]
)
)
(delay
(delay
(lam
arg_0_397
(lam
arg_1_398
(delay
(lam
case_UTuple2_399
[
[
case_UTuple2_399
arg_0_397
]
arg_1_398
]
)
)
)
)
)
)
]
(delay
(delay
(lam
x_400
x_400
)
)
)
]
)
(lam
w_401
(lam
w_402
[
(force
[
(force
(force
Tuple2_match_20
)
)
w_401
]
)
(lam
ww_403
(lam
ww_404
[
[
[
wcanMoveTo_45
ww_403
]
ww_404
]
w_402
]
)
)
]
)
)
]
)
(lam
ww_405
(lam
ww_406
(lam
w_407
[
(lam
sze_408
(force
[
[
(force
[
Bool_match_10
[
[
[
(force
(builtin
ifThenElse
)
)
[
[
(builtin
lessThanInteger
)
ww_405
]
(con
integer
1
)
]
]
False_9
]
True_8
]
]
)
(delay
(force
[
[
(force
[
Bool_match_10
[
[
[
(force
(builtin
ifThenElse
)
)
[
[
(builtin
lessThanEqualsInteger
)
ww_405
]
(force
sze_408
)
]
]
True_8
]
False_9
]
]
)
(delay
(force
[
[
(force
[
Bool_match_10
[
[
[
(force
(builtin
ifThenElse
)
)
[
[
(builtin
lessThanInteger
)
ww_406
]
(con
integer
1
)
]
]
False_9
]
True_8
]
]
)
(delay
(force
[
[
(force
[
Bool_match_10
[
[
[
(force
(builtin
ifThenElse
)
)
[
[
(builtin
lessThanEqualsInteger
)
ww_406
]
(force
sze_408
)
]
]
True_8
]
False_9
]
]
)
(delay
[
(force
[
ChessSet_match_26
w_407
]
)
(lam
ds_409
(lam
ds_410
(lam
ds_411
(lam
ts_412
[
[
[
(force
[
notIn_44
(delay
(lam
x_413
x_413
)
)
]
)
(lam
ds_414
(lam
ds_415
[
(force
[
(force
(force
Tuple2_match_20
)
)
ds_414
]
)
(lam
a_416
(lam
b_417
[
(force
[
(force
(force
Tuple2_match_20
)
)
ds_415
]
)
(lam
a_418
(lam
b_419
(force
[
[
(force
[
Bool_match_10
[
[
[
(force
(builtin
ifThenElse
)
)
[
[
(builtin
equalsInteger
)
a_416
]
a_418
]
]
True_8
]
False_9
]
]
)
(delay
[
[
equalsInteger_43
b_417
]
b_419
]
)
]
(delay
False_9
)
]
)
)
)
]
)
)
]
)
)
]
[
[
(force
(force
Tuple2_19
)
)
ww_405
]
ww_406
]
]
ts_412
]
)
)
)
)
]
)
]
(delay
False_9
)
]
)
)
]
(delay
False_9
)
]
)
)
]
(delay
False_9
)
]
)
)
]
(delay
False_9
)
]
)
)
(delay
[
(force
[
ChessSet_match_26
w_407
]
)
(lam
s_420
(lam
ds_421
(lam
ds_422
(lam
ds_423
s_420
)
)
)
)
]
)
]
)
)
)
]
)
[
(lam
arg_0_424
arg_0_424
)
[
(force
(force
fix1_0
)
)
(lam
notIn_425
(lam
arg_426
(delay
(lam
dEq_427
(lam
ds_428
(lam
ds_429
(force
[
[
(force
[
(force
Nil_match_4
)
ds_429
]
)
(delay
True_8
)
]
(lam
a_430
(lam
as_431
(delay
(force
[
[
(force
[
Bool_match_10
[
[
dEq_427
ds_428
]
a_430
]
]
)
(delay
False_9
)
]
(delay
[
[
[
(force
[
notIn_425
(delay
(lam
x_432
x_432
)
)
]
)
dEq_427
]
ds_428
]
as_431
]
)
]
)
)
)
)
]
)
)
)
)
)
)
)
]
]
]
)
(lam
x_433
(lam
y_434
[
[
[
(force
(builtin
ifThenElse
)
)
[
[
(builtin
equalsInteger
)
x_433
]
y_434
]
]
True_8
]
False_9
]
)
)
]
)
(lam
t_435
(lam
ds_436
[
(force
[
ChessSet_match_26
ds_436
]
)
(lam
s_437
(lam
n_438
(lam
f_439
(lam
ts_440
[
[
[
[
Board_25
s_437
]
[
[
(builtin
addInteger
)
n_438
]
(con
integer
1
)
]
]
f_439
]
[
[
(force
Cons_3
)
t_435
]
ts_440
]
]
)
)
)
)
]
)
)
]
)
[
(lam
arg_0_441
arg_0_441
)
[
(force
(force
fix1_0
)
)
(lam
map_442
(lam
arg_443
(delay
(delay
(lam
f_444
(lam
l_445
(force
[
[
(force
[
(force
Nil_match_4
)
l_445
]
)
(delay
(force
Nil_2
)
)
]
(lam
x_446
(lam
xs_447
(delay
[
[
(force
Cons_3
)
[
f_444
x_446
]
]
[
[
(force
(force
[
map_442
(delay
(lam
x_448
x_448
)
)
]
)
)
f_444
]
xs_447
]
]
)
)
)
]
)
)
)
)
)
)
)
]
]
]
)
(delay
(delay
(lam
dFoldable_449
(lam
t_450
[
[
[
[
(force
(force
dFoldable_449
)
)
[
(lam
v_451
[
[
(force
CConsMonoid_35
)
(lam
eta_452
(lam
eta_453
[
[
[
(force
p1Monoid_37
)
v_451
]
eta_453
]
eta_452
]
)
)
]
[
(force
mempty_38
)
v_451
]
]
)
[
[
(force
CConsMonoid_35
)
(lam
ds_454
(lam
ds_455
(lam
x_456
[
ds_454
[
ds_455
x_456
]
]
)
)
)
]
(lam
x_457
x_457
)
]
]
]
(lam
x_458
(lam
y_459
[
[
(builtin
addInteger
)
y_459
]
(con
integer
1
)
]
)
)
]
t_450
]
(con
integer
0
)
]
)
)
)
)
]
)
[
(lam
arg_0_460
arg_0_460
)
[
(force
(force
fix1_0
)
)
(lam
fFoldableNil_cfoldMap_461
(lam
arg_462
(delay
(delay
(lam
dMonoid_463
(lam
ds_464
(lam
ds_465
(force
[
[
(force
[
(force
Nil_match_4
)
ds_465
]
)
(delay
[
(force
mempty_38
)
dMonoid_463
]
)
]
(lam
x_466
(lam
xs_467
(delay
[
[
[
(force
p1Monoid_37
)
dMonoid_463
]
[
ds_464
x_466
]
]
[
[
[
(force
(force
[
fFoldableNil_cfoldMap_461
(delay
(lam
x_468
x_468
)
)
]
)
)
dMonoid_463
]
ds_464
]
xs_467
]
]
)
)
)
]
)
)
)
)
)
)
)
)
]
]
]
)
(delay
(lam
v_469
[
(force
[
(force
Monoid_match_36
)
v_469
]
)
(lam
v_470
(lam
v_471
v_471
)
)
]
)
)
]
)
(delay
(lam
v_472
[
(force
[
(force
Monoid_match_36
)
v_472
]
)
(lam
v_473
(lam
v_474
v_473
)
)
]
)
)
]
)
)
(delay
(lam
arg_0_475
(lam
arg_1_476
(delay
(lam
case_CConsMonoid_477
[
[
case_CConsMonoid_477
arg_0_475
]
arg_1_476
]
)
)
)
)
)
]
(delay
(lam
x_478
x_478
)
)
]
)
[
(lam
arg_0_479
arg_0_479
)
[
(force
(force
fix1_0
)
)
(lam
repl_480
(lam
n_481
(lam
a_482
(force
[
[
(force
[
Bool_match_10
[
[
[
(force
(builtin
ifThenElse
)
)
[
[
(builtin
equalsInteger
)
n_481
]
(con
integer
0
)
]
]
True_8
]
False_9
]
]
)
(delay
(force
Nil_2
)
)
]
(delay
[
[
(force
Cons_3
)
a_482
]
[
[
repl_480
[
[
(builtin
subtractInteger
)
n_481
]
(con
integer
1
)
]
]
a_482
]
]
)
]
)
)
)
)
]
]
]
)
[
(lam
arg_0_483
arg_0_483
)
[
(force
(force
fix1_0
)
)
(lam
interval_484
(lam
a_485
(lam
b_486
(force
[
[
(force
[
Bool_match_10
[
[
greaterThanInteger_32
a_485
]
b_486
]
]
)
(delay
(force
Nil_2
)
)
]
(delay
[
[
(force
Cons_3
)
a_485
]
[
[
interval_484
[
[
(builtin
addInteger
)
a_485
]
(con
integer
1
)
]
]
b_486
]
]
)
]
)
)
)
)
]
]
]
)
(lam
x_487
(lam
y_488
[
[
[
(force
(builtin
ifThenElse
)
)
[
[
(builtin
lessThanEqualsInteger
)
x_487
]
y_488
]
]
False_9
]
True_8
]
)
)
]
)
[
(lam
arg_0_489
arg_0_489
)
[
(force
(force
fix1_0
)
)
(lam
quickSort_490
(lam
arg_491
(delay
(lam
dOrd_492
(lam
ds_493
(force
[
[
(force
[
(force
Nil_match_4
)
ds_493
]
)
(delay
(force
Nil_2
)
)
]
(lam
x_494
(lam
xs_495
(delay
[
[
(force
augment_28
)
(delay
(lam
c_496
(lam
n_497
[
[
[
(force
(force
foldr_29
)
)
c_496
]
n_497
]
[
[
(force
[
quickSort_490
(delay
(lam
x_498
x_498
)
)
]
)
dOrd_492
]
[
(force
build_30
)
(delay
(lam
c_499
(lam
n_500
[
[
[
(force
(force
foldr_29
)
)
(lam
ds_501
(lam
ds_502
(force
[
[
(force
[
Bool_match_10
[
[
[
(force
[
(force
Ord_match_17
)
dOrd_492
]
)
(lam
v_503
(lam
v_504
(lam
v_505
(lam
v_506
(lam
v_507
(lam
v_508
(lam
v_509
(lam
v_510
v_505
)
)
)
)
)
)
)
)
]
ds_501
]
x_494
]
]
)
(delay
[
[
c_499
ds_501
]
ds_502
]
)
]
(delay
ds_502
)
]
)
)
)
]
n_500
]
xs_495
]
)
)
)
]
]
]
)
)
)
]
[
[
(force
augment_28
)
(delay
(lam
c_511
(lam
n_512
[
[
c_511
x_494
]
n_512
]
)
)
)
]
[
[
(force
[
quickSort_490
(delay
(lam
x_513
x_513
)
)
]
)
dOrd_492
]
[
(force
build_30
)
(delay
(lam
c_514
(lam
n_515
[
[
[
(force
(force
foldr_29
)
)
(lam
ds_516
(lam
ds_517
(force
[
[
(force
[
Bool_match_10
[
[
[
(force
[
(force
Ord_match_17
)
dOrd_492
]
)
(lam
v_518
(lam
v_519
(lam
v_520
(lam
v_521
(lam
v_522
(lam
v_523
(lam
v_524
(lam
v_525
v_523
)
)
)
)
)
)
)
)
]
ds_516
]
x_494
]
]
)
(delay
[
[
c_514
ds_516
]
ds_517
]
)
]
(delay
ds_517
)
]
)
)
)
]
n_515
]
xs_495
]
)
)
)
]
]
]
]
)
)
)
]
)
)
)
)
)
)
]
]
]
)
(delay
(lam
g_526
[
[
(force
g_526
)
(force
Cons_3
)
]
(force
Nil_2
)
]
)
)
]
)
(delay
(delay
(lam
k_527
(lam
z_528
[
(lam
go_529
go_529
)
[
(lam
arg_0_530
arg_0_530
)
[
(force
(force
fix1_0
)
)
(lam
go_531
(lam
ds_532
(force
[
[
(force
[
(force
Nil_match_4
)
ds_532
]
)
(delay
z_528
)
]
(lam
y_533
(lam
ys_534
(delay
[
[
k_527
y_533
]
[
go_531
ys_534
]
]
)
)
)
]
)
)
)
]
]
]
)
)
)
)
]
)
(delay
(lam
g_535
(lam
xs_536
[
[
(force
g_535
)
(force
Cons_3
)
]
xs_536
]
)
)
)
]
)
(lam
ds_537
(lam
ds_538
True_8
)
)
]
)
)
(lam
arg_0_539
(lam
arg_1_540
(lam
arg_2_541
(lam
arg_3_542
(delay
(lam
case_Board_543
[
[
[
[
case_Board_543
arg_0_539
]
arg_1_540
]
arg_2_541
]
arg_3_542
]
)
)
)
)
)
)
]
(lam
x_544
x_544
)
]
)
)
)
(delay
(lam
arg_0_545
(delay
(lam
case_Just_546
(lam
case_Nothing_547
[
case_Just_546
arg_0_545
]
)
)
)
)
)
]
(delay
(delay
(lam
case_Just_548
(lam
case_Nothing_549
case_Nothing_549
)
)
)
)
]
(delay
(lam
x_550
x_550
)
)
]
)
(delay
(delay
(lam
w_551
(lam
w_552
(lam
w_553
(lam
w_554
[
(force
[
(force
(force
Tuple2_match_20
)
)
w_553
]
)
(lam
ww_555
(lam
ww_556
[
(force
[
(force
(force
Tuple2_match_20
)
)
w_554
]
)
(lam
ww_557
[
(lam
wild_558
(lam
ww_559
(force
[
[
[
(force
[
Ordering_match_15
[
[
[
(force
compare_18
)
w_551
]
ww_555
]
ww_557
]
]
)
(delay
[
[
[
(force
compare_18
)
w_552
]
ww_556
]
ww_559
]
)
]
(delay
(force
wild_558
)
)
]
(delay
(force
wild_558
)
)
]
)
)
)
(delay
[
[
[
(force
compare_18
)
w_551
]
ww_555
]
ww_557
]
)
]
)
]
)
)
]
)
)
)
)
)
)
]
)
)
(delay
(delay
(lam
arg_0_560
(lam
arg_1_561
(delay
(lam
case_Tuple2_562
[
[
case_Tuple2_562
arg_0_560
]
arg_1_561
]
)
)
)
)
)
)
]
(delay
(delay
(lam
x_563
x_563
)
)
)
]
)
(delay
(lam
v_564
[
(force
[
(force
Ord_match_17
)
v_564
]
)
(lam
v_565
(lam
v_566
(lam
v_567
(lam
v_568
(lam
v_569
(lam
v_570
(lam
v_571
(lam
v_572
v_566
)
)
)
)
)
)
)
)
]
)
)
]
)
)
(delay
(lam
arg_0_573
(lam
arg_1_574
(lam
arg_2_575
(lam
arg_3_576
(lam
arg_4_577
(lam
arg_5_578
(lam
arg_6_579
(lam
arg_7_580
(delay
(lam
case_CConsOrd_581
[
[
[
[
[
[
[
[
case_CConsOrd_581
arg_0_573
]
arg_1_574
]
arg_2_575
]
arg_3_576
]
arg_4_577
]
arg_5_578
]
arg_6_579
]
arg_7_580
]
)
)
)
)
)
)
)
)
)
)
)
]
(delay
(lam
x_582
x_582
)
)
]
)
)
)
)
(delay
(lam
case_EQ_583
(lam
case_GT_584
(lam
case_LT_585
case_EQ_583
)
)
)
)
]
(delay
(lam
case_EQ_586
(lam
case_GT_587
(lam
case_LT_588
case_GT_587
)
)
)
)
]
(delay
(lam
case_EQ_589
(lam
case_GT_590
(lam
case_LT_591
case_LT_591
)
)
)
)
]
(lam x_592 x_592)
]
)
[
(lam arg_0_593 arg_0_593)
[
(force (force fix1_0))
(lam
depthSearch_594
(lam
arg_595
(delay
(lam
dEq_596
(lam
depth_597
(lam
q_598
(lam
growFn_599
(lam
finFn_600
(force
[
[
(force
[
Bool_match_10
[
[
[
(force
(builtin
ifThenElse
)
)
[
[
(builtin
equalsInteger
)
depth_597
]
(con
integer
0
)
]
]
True_8
]
False_9
]
]
)
(delay
(force
Nil_2
)
)
]
(delay
(force
[
[
(force
[
Bool_match_10
(force
[
[
(force
[
(force
Nil_match_4
)
q_598
]
)
(delay
True_8
)
]
(lam
ipv_601
(lam
ipv_602
(delay
False_9
)
)
)
]
)
]
)
(delay
(force
Nil_2
)
)
]
(delay
(force
[
[
(force
[
Bool_match_10
[
finFn_600
[
(force
inquireFront_5
)
q_598
]
]
]
)
(delay
[
[
(force
Cons_3
)
[
(force
inquireFront_5
)
q_598
]
]
[
[
[
[
[
(force
[
depthSearch_594
(delay
(lam
x_603
x_603
)
)
]
)
dEq_596
]
[
[
(builtin
subtractInteger
)
depth_597
]
(con
integer
1
)
]
]
[
(force
removeFront_6
)
q_598
]
]
growFn_599
]
finFn_600
]
]
)
]
(delay
[
[
[
[
[
(force
[
depthSearch_594
(delay
(lam
x_604
x_604
)
)
]
)
dEq_596
]
[
[
(builtin
subtractInteger
)
depth_597
]
(con
integer
1
)
]
]
[
[
[
(force
(force
[
foldr_7
(delay
(lam
x_605
x_605
)
)
]
)
)
(force
Cons_3
)
]
[
(force
removeFront_6
)
q_598
]
]
[
growFn_599
[
(force
inquireFront_5
)
q_598
]
]
]
]
growFn_599
]
finFn_600
]
)
]
)
)
]
)
)
]
)
)
)
)
)
)
)
)
)
]
]
]
)
)
)
(delay
(lam
case_True_606
(lam
case_False_607 case_True_606
)
)
)
]
(delay
(lam
case_True_608
(lam
case_False_609 case_False_609
)
)
)
]
(lam x_610 x_610)
]
)
[
(lam arg_0_611 arg_0_611)
[
(force (force fix1_0))
(lam
foldr_612
(lam
arg_613
(delay
(delay
(lam
f_614
(lam
acc_615
(lam
l_616
(force
[
[
(force
[
(force
Nil_match_4
)
l_616
]
)
(delay acc_615)
]
(lam
x_617
(lam
xs_618
(delay
[
[
f_614 x_617
]
[
[
[
(force
(force
[
foldr_612
(delay
(lam
x_619
x_619
)
)
]
)
)
f_614
]
acc_615
]
xs_618
]
]
)
)
)
]
)
)
)
)
)
)
)
)
]
]
]
)
(delay
(lam
ds_620
(force
[
[
(force [ (force Nil_match_4) ds_620 ])
(delay
[ (force error_1) (con unit ()) ]
)
]
(lam ds_621 (lam t_622 (delay t_622)))
]
)
)
)
]
)
(delay
(lam
ds_623
(force
[
[
(force [ (force Nil_match_4) ds_623 ])
(delay [ (force error_1) (con unit ()) ])
]
(lam h_624 (lam ds_625 (delay h_624)))
]
)
)
)
]
)
)
)
(delay
(delay
(lam case_Nil_626 (lam case_Cons_627 case_Nil_626))
)
)
]
(delay
(lam
arg_0_628
(lam
arg_1_629
(delay
(lam
case_Nil_630
(lam
case_Cons_631
[ [ case_Cons_631 arg_0_628 ] arg_1_629 ]
)
)
)
)
)
)
]
(delay (lam x_632 x_632))
]
)
(delay (lam thunk_633 (error )))
]
)
(delay
(delay
(lam
f_634
[
(lam s_635 [ s_635 s_635 ])
(lam s_636 (lam x_637 [ [ f_634 [ s_636 s_636 ] ] x_637 ]))
]
)
)
)
]
(con integer 500)
]
(con integer 500)
]
)
